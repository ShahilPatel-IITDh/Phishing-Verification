import React from 'react';
import { hydrate, render } from 'react-dom';
import { BrowserRouter, Route, Switch, Redirect } from 'react-router-dom';
import sectionList from './section-list/sections';
import Header from './sections/Header';
import SectionWrapper from 'src/Components/SectionWrapper';
import './global.scss';
import useURLHash from 'src/hooks/useURLHash';
import { parseToHashID } from 'src/utils/utils';
import RootStoreProvider from './Components/RootStoreProvider';
import TokenAddress from './sections/TokenAddress';
import NavSocial from './sections/NavSocial';
import { SectionName } from './utils/constants';
import ModalEventHouseBox from './sections/ModalEventHouseBox';
import FullPageScroll from 'src/Components/FullPageScroll';
import ActiveSectionProvider from 'src/Components/ActiveSectionProvider';
import { useBreakpoint } from 'src/utils/breakpoints';
import { disableFullPageOnBreakpoints } from 'src/Components/FullPageScroll/utils';
const App = () => {
    const hash = useURLHash();
    const breakpoint = useBreakpoint();
    const [startSectionIndex, setStartSectionIndex] = React.useState(() => {
        const idx = sectionList.findIndex(({ name }) => name === hash);
        return idx > -1 ? idx : 0;
    });
    const [disableAction, setDisableAction] = React.useState(!disableFullPageOnBreakpoints(breakpoint));
    const [hashString, setHashString] = React.useState(sectionList.find(({ name }) => parseToHashID(name) === hash) ? hash : '');
    const [sectionRefs] = React.useState(sectionList.map(() => React.createRef()));
    const goToSection = React.useCallback((hashString) => {
        const index = sectionList.findIndex(section => parseToHashID(section.name) === hashString);
        if (index >= 0) {
            setStartSectionIndex(index);
        }
    }, [hashString]);
    const beforeScroll = (nextIndex) => {
        if (sectionList[nextIndex]) {
            setDisableAction(true);
            window.location.hash = parseToHashID(sectionList[nextIndex].name);
        }
    };
    const afterScroll = () => {
        setDisableAction(false);
    };
    React.useEffect(() => {
        if (!sectionList.find(({ name }) => parseToHashID(name) === hash)) {
            window.location.hash = parseToHashID(SectionName.HOME);
        }
        else {
            setHashString(hash);
        }
    }, [hash]);
    React.useEffect(() => {
        goToSection(hashString);
    }, [goToSection, hashString]);
    return (React.createElement(BrowserRouter, null,
        React.createElement(Switch, null,
            React.createElement(Route, { path: "/", exact: true },
                React.createElement(React.StrictMode, null,
                    React.createElement(RootStoreProvider, null,
                        React.createElement(ActiveSectionProvider, null,
                            React.createElement(Header, { refList: sectionRefs, sections: sectionList, onClick: (hash) => setHashString(hash), hideHeader: disableAction }),
                            React.createElement(NavSocial, { hash: hash }),
                            React.createElement(React.Suspense, { fallback: null },
                                React.createElement(FullPageScroll, { initIndex: startSectionIndex, onBeforeScroll: beforeScroll, onAfterScroll: afterScroll, refList: sectionRefs }, sectionList.map((section, index) => {
                                    const Component = section.component;
                                    return (React.createElement(SectionWrapper, { disableAction: disableAction, name: section.name, key: section.name, ref: sectionRefs[index] },
                                        React.createElement(Component, { refList: sectionRefs })));
                                })),
                                React.createElement(TokenAddress, null)),
                            React.createElement(ModalEventHouseBox, null))))),
            React.createElement(Route, { path: "*", render: () => React.createElement(Redirect, { to: "/" }) }))));
};
const rootElement = document.getElementById('app');
if (rootElement.hasChildNodes()) {
    hydrate(React.createElement(App, null), rootElement);
}
else {
    render(React.createElement(App, null), rootElement);
}
